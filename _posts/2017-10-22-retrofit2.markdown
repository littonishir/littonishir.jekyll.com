---
layout:     post
title:      "Retrofit+RxJava2的使用"
subtitle:   "向Rx势力低头"
date:       2017-10-22 12:00:00
author:     "ishir"
header-img: "img/2017-10-15-ps-one.jpg"
header-mask: 0.5
catalog:    true
tags:
    - Retrofit
---
**<font size="5">  </font>**

# Retrofit

## 1. 添加依赖

```gradle
    //添加 Retrofit Rx 的依赖
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.5'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.0'
```
## 2. 创建Retrofit实例

```java
public class RetrofitHelper {
    private static RetrofitHelper mInstance = new RetrofitHelper();

    Retrofit retrofit;
    NetService netService;

    private RetrofitHelper() {
        //1.创建Regrofit的实例对象
        retrofit = new Retrofit.Builder()
                //设置服务器主机,注意：baseUrl必须以/结尾，否则报错
				//注意这里IP请换成你自己电脑IP
                .baseUrl("http://192.168.7.57:3000/")
                //配置gson解析器,内部会使用Gson库来解析java bean
                .addConverterFactory(GsonConverterFactory.create())
                //用于返回Rxjava调用
                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                //添加Http拦截器,拦截后台返回的数据
                .client(getOkHttpClient())
                .build();

        //2.获取NetService业务接口的实现类对象,其中内部是通过动态代理来创建接口实现类对象的
        netService = retrofit.create(NetService.class);
    }

    public static RetrofitHelper create() {
        return mInstance;
    }

    public NetService getNetService() {
        return netService;
    }

    public OkHttpClient getOkHttpClient() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        if (BuildConfig.DEBUG) {
            HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {
                @Override
                public void log(String message) {
                    Log.i("ishir", "result: " + message);
                }
            });
            interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
            builder.addInterceptor(interceptor);
        }
        return builder.build();
    }
}
```

## 3. 定义业务逻辑接口

```java
public interface NetService {
/**
 * 此处的接口是用来定义项目中的所有的业务方法
 * Observable为回调对象 <泛型>为Bean类  xxx是方法名(自己任意取)
 */

    @FormUrlEncoded //该注解表示会对请求体的参数进行url编码，目的是防止中文乱码
    @POST("ishir")
    Observable<LoginBean> login(@Field("name") String p1, @Field("password") String p2);
}
```

## 4. 请求网络代码

```java
        //Retrofit的终极使用方式这样的：
        RetrofitHelper.create()
                .getNetService()
                .login(name, pwd)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subject<LoginBean>() {
                    @Override
                    public boolean hasObservers() {
                        return false;
                    }

                    @Override
                    public boolean hasThrowable() {
                        return false;
                    }

                    @Override
                    public boolean hasComplete() {
                        return false;
                    }

                    @Override
                    public Throwable getThrowable() {
                        return null;
                    }

                    @Override
                    protected void subscribeActual(Observer<? super LoginBean> observer) {

                    }

                    @Override
                    public void onSubscribe(@NonNull Disposable d) {

                    }

                    @Override
                    public void onNext(@NonNull LoginBean loginBean) {
                        String data = loginBean.getData();
                        String name = loginBean.getName();
                        String password = loginBean.getPassword();
                        //设置为用户名+密码
                        textView.setText(name + password + data);
                    }

                    @Override
                    public void onError(@NonNull Throwable e) {
                        e.printStackTrace();
                    }

                    @Override
                    public void onComplete() {
                    }
                });
```

>后台服务端代码如何跑起来请看这篇

[向全栈工程师迈进](http://www.littonishir.top/2017/10/20/node-one/)

[APP源码](https://github.com/littonishir/retrofit-rxjava2.git)

[后台源码](https://github.com/littonishir/retrofit-rxjava2-server.git)